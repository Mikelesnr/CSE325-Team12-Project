@using CSE325_Team12_Project.Models.DTOs
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject AuthClientService AuthClient
@inject SidebarUpdateService SidebarUpdate

<aside class="asidebar @(Settings) @(IsSidebarVisible ? "expanded" : "collapsed")">
    <div class="button-container">
        <Button Variant="ButtonVariant.Primary" Size="ButtonSize.Medium" OnClick="@NavigateToCreate">
            @(IsChatsPage ? "Start a new conversation" : "Create a new troupe")
        </Button>
    </div>

    <div class="aside-content">
        <h2 class="aside-title">@Title</h2>
        <div class="direct-messages">
            @if (IsChatsPage)
            {
                @foreach (var convo in Conversations)
                {
                    var other = convo.Participants.FirstOrDefault(p => p.UserId.ToString() !=
                    AuthClient.CurrentUser?.Id.ToString());
                    if (other == null) continue;
                    <button class="message @(ActiveConversationId == convo.Id ? "active" : "")"
                        @onclick="() => OpenConversation(convo.Id)">
                        <div class="profile-image">
                            <img class="profile-avatar" src="@GetAvatar(other.AvatarUrl)" alt="Profile Icon" width="50px" />
                        </div>
                        <p>@other.Name</p>
                    </button>
                }
            }
            else
            {
                @foreach (var troupe in Troupes)
                {
                    <button class="message @(ActiveTroupeId == troupe.Id ? "active" : "")"
                        @onclick="() => OpenTroupe(troupe.Id)">
                        <div class="profile-image">
                            <img class="profile-avatar" src="@TroupeAvatar(troupe.AvatarUrl)" alt="Troupe Icon" width="50px" />
                        </div>
                        <p>@troupe.Name</p>
                    </button>
                }
            }
        </div>
    </div>
</aside>


@code {
    private string Title => IsChatsPage ? "Direct Messages" : "Troupes";
    private string Settings => !IsSettings ? "visible" : "hidden";

    private bool IsChatsPage = false;
    private bool IsSettings = false;
    private bool IsSidebarVisible = true;

    public List<ConversationDto> Conversations { get; private set; } = new();
    public List<TroupeDto> Troupes { get; private set; } = new();

    private bool hasRendered = false;
    private Guid? ActiveConversationId { get; set; }
    private Guid? ActiveTroupeId { get; set; }

    private void ToggleSidebar()
    {
        IsSidebarVisible = !IsSidebarVisible;
    }

    private void NavigateToCreate()
    {
        var target = IsChatsPage ? "/chats/create" : "/troupes/create";
        NavigationManager.NavigateTo(target);
    }

    private void OpenConversation(Guid conversationId)
    {
        ActiveConversationId = conversationId;
        NavigationManager.NavigateTo($"/chats/{conversationId}");
    }

    private void OpenTroupe(Guid troupeId)
    {
        ActiveTroupeId = troupeId;
        NavigationManager.NavigateTo($"/troupes/{troupeId}");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !hasRendered)
        {
            hasRendered = true;
            NavigationManager.LocationChanged += OnLocationChanged;
            SidebarUpdate.OnTroupeJoined += HandleTroupeJoined;

            if (!AuthClient.IsAuthenticated)
            {
                var restored = await AuthClient.RestoreSessionAsync();
                if (!restored || AuthClient.CurrentUser == null)
                {
                    Console.WriteLine("❌ Unable to restore session.");
                    return;
                }
            }

            UpdateRouteState();
            await LoadSidebarData();
            StateHasChanged();
        }
    }

    private async void OnLocationChanged(object? sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        UpdateRouteState();
        await LoadSidebarData();
        StateHasChanged();
    }

    private void UpdateRouteState()
    {
        var uri = NavigationManager.Uri.ToLower();
        IsChatsPage = uri.Contains("/chats");
        IsSettings = uri.Contains("/settings");

        if (IsChatsPage)
        {
            var match = System.Text.RegularExpressions.Regex.Match(uri, @"/chats/([a-f0-9\\-]+)");
            ActiveConversationId = match.Success && Guid.TryParse(match.Groups[1].Value, out var convoId) ? convoId : null;
            ActiveTroupeId = null;
        }
        else
        {
            var match = System.Text.RegularExpressions.Regex.Match(uri, @"/troupes/([a-f0-9\\-]+)");
            ActiveTroupeId = match.Success && Guid.TryParse(match.Groups[1].Value, out var troupeId) ? troupeId : null;
            ActiveConversationId = null;
        }
    }

    private async Task LoadSidebarData()
    {
        try
        {
            if (IsChatsPage)
            {
                Conversations = await Http.GetFromJsonAsync<List<ConversationDto>>("/api/conversations/mine") ?? new();
            }
            else
            {
                Troupes = await Http.GetFromJsonAsync<List<TroupeDto>>("/api/membership/mine") ?? new();
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"❌ Sidebar data load failed: {ex.Message}");
        }
    }

    private async void HandleTroupeJoined()
    {
        await LoadSidebarData();
    }

    private string GetAvatar(string? url) => string.IsNullOrWhiteSpace(url) ? "images/Profile.svg" : url;
    private string TroupeAvatar(string? url) => string.IsNullOrWhiteSpace(url) ? "images/Troupe-chat.svg" : url;

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
        SidebarUpdate.OnTroupeJoined -= HandleTroupeJoined;
    }

    public class ConversationDto
    {
        public Guid Id { get; set; }
        public List<ParticipantDto> Participants { get; set; } = new();
    }

    public class ParticipantDto
    {
        public Guid UserId { get; set; }
        public string Name { get; set; } = string.Empty;
        public string AvatarUrl { get; set; } = string.Empty;
    }

    public class TroupeDto
    {
        public Guid Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string AvatarUrl { get; set; } = string.Empty;
    }
}