@inject NavigationManager Navigation
@inject AuthClientService AuthService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<div class="nav-container">
    <div class="logo-row">
        <a href="/chats" class="logo">
            <img src="images/Logo.png" alt="Logo" height="80px" />
        </a>
    </div>

    @if (AuthService.IsAuthenticated)
    {
        <div class="nav-links">
            <div class="nav-item @(IsActive("/chats") ? "active" : null)">
                <a href="/chats" class="link">
                    <img src="images/Chat-icon.svg" alt="Chat Icon" height="45px" width="45px" />
                    <p>Chats</p>
                </a>
            </div>
            <div class="nav-item @(IsActive("/troupes") ? "active" : null)">
                <a href="/troupes" class="link">
                    <img src="images/Troupes-icon.svg" alt="Troupes Icon" height="45px" width="45px" />
                    <p>Troupes</p>
                </a>
            </div>
            <div class="nav-item @(IsActive("/settings") ? "active" : null)">
                <a href="/settings" class="link">
                    <img src="images/Settings-icons.svg" alt="Settings Icon" height="45px" width="45px" />
                    <p>Settings</p>
                </a>
            </div>
            <div class="nav-item">
                <a class="link" href="#" @onclick="HandleLogout">
                    <img src="images/logout.svg" alt="Logout Icon" height="45px" width="45px" />
                    <p>Logout</p>
                </a>
            </div>
        </div>
    }
    else
    {
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="login">
                <span class="oi oi-account-login" aria-hidden="true"></span> Login
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="register">
                <span class="oi oi-plus" aria-hidden="true"></span> Register
            </NavLink>
        </div>
    }
</div>

@code {
    [Parameter] public EventCallback ToggleSidebar { get; set; }

    private bool hasInitialized = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !hasInitialized)
        {
            hasInitialized = true;

            if (!AuthService.IsAuthenticated)
            {
                var token = await LocalStorage.GetItemAsync<string>("authToken");
                if (!string.IsNullOrWhiteSpace(token))
                {
                    await AuthService.RestoreSessionAsync();
                    StateHasChanged();
                }
            }
        }
    }

    protected override void OnInitialized()
    {
        Navigation.LocationChanged += HandleLocationChanged;
    }

    private void HandleLocationChanged(object? sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        StateHasChanged();
    }

    public void Dispose()
    {
        Navigation.LocationChanged -= HandleLocationChanged;
    }

    private async Task HandleLogout()
    {
        await AuthService.LogoutAsync();
        Navigation.NavigateTo("login", forceLoad: true);
    }

    private bool IsActive(string href)
    {
        var uri = Navigation.ToBaseRelativePath(Navigation.Uri).TrimEnd('/');
        var link = href.TrimStart('/');
        return uri.StartsWith(link, StringComparison.OrdinalIgnoreCase);
    }
}